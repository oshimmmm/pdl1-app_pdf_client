{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yasuh\\\\pdl1-app\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchApp = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false); // 検索が実行されたかどうかを追跡\n\n  const handleSearch = async () => {\n    setHasSearched(false); // 新しい検索を開始するたびにリセット\n    setImages([]); // 検索中の表示をクリア\n\n    const response = await fetch('http://localhost:5000/api/search', {\n      method: 'POST',\n      //POSTリクエストを上の5000ポートの/api/searchというエンドポイントに送信\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      }) //送信するデータ（query）はJSON形式にする\n    });\n    const data = await response.json(); //feachに対して帰ってきたresponseをdataに格納\n    setHasSearched(true); // 検索が実行されたらtrueにする\n\n    if (data.images) {\n      setImages(data.images);\n    } else {\n      setImages([]); // 画像が見つからない場合\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query //入力された内容をqueryとする\n      ,\n      onChange: e => setQuery(e.target.value) //onChangeイベントでリアルタイムにsetQuery関数を呼び出してqueryに保存する。（ユーザーの入力内容がReactの状態として保持される）\n      ,\n      placeholder: \"\\u5358\\u8A9E\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"\\u691C\\u7D22\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: images.length > 0 ? images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `data:image/png;base64,${image}`,\n        alt: \"PDF page\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)) : hasSearched && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u753B\\u50CF\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 26\n      }, this) // 検索後にのみ表示\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchApp, \"uWGKF12+s5kTu7O0NcGQhgpFOCI=\");\n_c = SearchApp;\nexport default SearchApp;\nvar _c;\n$RefreshReg$(_c, \"SearchApp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SearchApp","_s","query","setQuery","images","setImages","hasSearched","setHasSearched","handleSearch","response","fetch","method","headers","body","JSON","stringify","data","json","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","image","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/yasuh/pdl1-app/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst SearchApp = () => {\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);  // 検索が実行されたかどうかを追跡\n\n  const handleSearch = async () => {\n\n    setHasSearched(false);  // 新しい検索を開始するたびにリセット\n    setImages([]);  // 検索中の表示をクリア\n\n    const response = await fetch('http://localhost:5000/api/search', {\n      method: 'POST', //POSTリクエストを上の5000ポートの/api/searchというエンドポイントに送信\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query }), //送信するデータ（query）はJSON形式にする\n    });\n    const data = await response.json(); //feachに対して帰ってきたresponseをdataに格納\n    setHasSearched(true);  // 検索が実行されたらtrueにする\n\n    if (data.images) {\n      setImages(data.images);\n    } else {\n      setImages([]);  // 画像が見つからない場合\n    }\n  };\n\n  return (\n    <div>\n      <input \n        type=\"text\" \n        value={query}  //入力された内容をqueryとする\n        onChange={(e) => setQuery(e.target.value)}  //onChangeイベントでリアルタイムにsetQuery関数を呼び出してqueryに保存する。（ユーザーの入力内容がReactの状態として保持される）\n        placeholder=\"単語を入力してください\" \n      />\n      <button onClick={handleSearch}>検索</button>\n      <div>\n        {images.length > 0 ? (\n          images.map((image, index) => (\n            <img key={index} src={`data:image/png;base64,${image}`} alt=\"PDF page\" />\n          ))\n        ) : (\n          hasSearched && <p>画像が見つかりませんでした</p>  // 検索後にのみ表示\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchApp;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAExD,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAE/BD,cAAc,CAAC,KAAK,CAAC,CAAC,CAAE;IACxBF,SAAS,CAAC,EAAE,CAAC,CAAC,CAAE;;IAEhB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEb;MAAM,CAAC,CAAC,CAAE;IACnC,CAAC,CAAC;IACF,MAAMc,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;IACpCV,cAAc,CAAC,IAAI,CAAC,CAAC,CAAE;;IAEvB,IAAIS,IAAI,CAACZ,MAAM,EAAE;MACfC,SAAS,CAACW,IAAI,CAACZ,MAAM,CAAC;IACxB,CAAC,MAAM;MACLC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAE;IAClB;EACF,CAAC;EAED,oBACEN,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MACEoB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAElB,KAAM,CAAE;MAAA;MACfmB,QAAQ,EAAGC,CAAC,IAAKnB,QAAQ,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAE;MAAA;MAC5CI,WAAW,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACF7B,OAAA;MAAQ8B,OAAO,EAAErB,YAAa;MAAAU,QAAA,EAAC;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1C7B,OAAA;MAAAmB,QAAA,EACGd,MAAM,CAAC0B,MAAM,GAAG,CAAC,GAChB1B,MAAM,CAAC2B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACtBlC,OAAA;QAAiBmC,GAAG,EAAE,yBAAyBF,KAAK,EAAG;QAACG,GAAG,EAAC;MAAU,GAA5DF,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyD,CACzE,CAAC,GAEFtB,WAAW,iBAAIP,OAAA;QAAAmB,QAAA,EAAG;MAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAE;IACtC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA7CID,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AA+Cf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}